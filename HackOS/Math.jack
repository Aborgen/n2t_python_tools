class Math {
  static Array bitMask;

  function void init() {
    var int n, i, singleBit;
    let n = 16;
    let i = 0;
    let singleBit = 1;
    let bitMask = Array.new(n);
    while (i < n) {
      let bitMask[i] = singleBit;
      let singleBit = singleBit + singleBit;
      let i = i + 1;
    }

    return;
  }

  function int multiply(int x, int y) {
    var int i, sum;
    if ((x = 0) | (y = 0)) {
      return 0;
    }

    let sum = 0;
    let i = 0;
    while (i < 16) {
      if (Math.bitAt(y, i)) {
        let sum = sum + x;
      }

      let x = x + x;
      let i = i + 1;
    }

    return sum;
  }

  function int divide(int x, int y) {
    var int numerator, denominator, sign, quotient, quotient2;
    let sign = 1;
    if (x < 0) {
      let sign = -sign;
    }

    if (y < 0) {
      let sign = -sign;
    }

    let numerator = Math.abs(x);
    let denominator = Math.abs(y);
    if ((denominator > numerator) | (denominator < 0)) {
      return 0;
    }

    let quotient = Math.divide(numerator, (denominator + denominator));
    let quotient2 = quotient + quotient;
    if ((numerator - (quotient2 * denominator)) < denominator) {
      return quotient2 * sign;
    }
    else {
      return quotient2 + 1 * sign;
    }
  }

  function int abs(int n) {
    var int absN;
    if (n < 0) {
      let absN = -n;
    }
    else {
      let absN = n;
    }

    return absN;
  }

  function int sqrt(int n) {
    var int left, right, middle;
    let left = 0;
    let right = n + 1;
    while (left < right) {
      let middle = ((right - left) / 2) + left;
      if (middle * middle > n) {
        let right = middle;
      }
      else {
        let left = middle + 1;
      }
    }

    return left - 1;
  }

  function int pow(int x, int n) {
    var int result, absN, xCopy;
    if (n < 0) {
      return 0;
    }

    let result = 1;
    let absN = Math.abs(n);
    let xCopy = x;
    while (absN > 0) {
      if((absN & 1) = 1) {
        let result = result * xCopy;
      }

      let absN = absN / 2;
      let xCopy = xCopy * xCopy;
    }

    return result;
  }

  function boolean bitAt(int n, int i) {
    var int singleBit;
    let singleBit = n & bitMask[i];
    if ((singleBit | 0) = 0) {
      return false;
    }
    else {
      return true;
    }
  }
}
