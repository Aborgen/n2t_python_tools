class Math {
  static Array bitMask;

  function void init() {
    var int n, i, singleBit;
    let n = 16;
    let i = 0;
    let singleBit = 1;
    let bitMask = Array.new(n);
    while (i < n) {
      let bitMask[i] = singleBit;
      let singleBit = singleBit + singleBit;
      let i = i + 1;
    }

    return;
  }

  function Array power2Array() {
    return bitMask;
  }

  function int multiply(int x, int y) {
    var int i, sum;
    if ((x = 0) | (y = 0)) {
      return 0;
    }

    let sum = 0;
    let i = 0;
    while (i < 16) {
      if (Math.bitAt(y, i)) {
        let sum = sum + x;
      }

      let x = x + x;
      let i = i + 1;
    }

    return sum;
  }

  function int divide(int x, int y) {
    var int quotient;
    let quotient = Math._recur_divide(Math.abs(x), Math.abs(y));
    if ((x < 0) = (y < 0)) {
      return quotient;
    }
    else {
      return -quotient;
    }
  }

  function int _recur_divide(int numerator, int denominator) {
    var int quotient;
    if ((denominator > numerator) | (denominator < 0)) {
      return 0;
    }

    let quotient = Math._recur_divide(numerator, (denominator + denominator));
    let quotient = quotient + quotient;
    if ((numerator - (quotient * denominator)) < denominator) {
      return quotient;
    }
    else {
      return quotient + 1;
    }
  }

  function int abs(int n) {
    var int absN;
    if (n < 0) {
      let absN = -n;
    }
    else {
      let absN = n;
    }

    return absN;
  }

  function int sqrt(int n) {
    var int y, j, middle, middle2;
    let y = 0;
    let j = 7; // n / 2 - 1, where n = number of bits in int (16)
    while (j > -1) {
      let middle = y + Math.pow2(j);
      let middle2 = middle * middle;
      if ((middle2 > 0) & ((middle2 < n) | (middle2 = n))) {
        let y = middle;
      }

      let j = j - 1;
    }

    return y;
  }

  function int pow(int x, int n) {
    var int result, absN, xCopy;
    if (n < 0) {
      return 0;
    }

    let result = 1;
    let absN = Math.abs(n);
    let xCopy = x;
    while (absN > 0) {
      if((absN & 1) = 1) {
        let result = result * xCopy;
      }

      let absN = absN / 2;
      let xCopy = xCopy * xCopy;
    }

    return result;
  }

  function int pow2(int n) {
    return Math.pow(2, n);
  }

  function int min(int x, int y) {
    var int result;
    if ((x < y)) {
      let result = x;
    }
    else {
      let result = y;
    }

    return result;
  }

  function int max(int x, int y) {
    var int result;
    if ((x > y)) {
      let result = x;
    }
    else {
      let result = y;
    }

    return result;
  }

  function int modPositive(int a, int b) {
    var int quotient, remainder;
    if ((a < 0) | (b < 0)) {
      return -1;
    }

    let quotient = a / b;
    let remainder = a - (b * quotient);
    return remainder;
  }

  function boolean bitAt(int n, int i) {
    var int singleBit;
    let singleBit = n & bitMask[i];
    if (singleBit = 0) {
      return false;
    }
    else {
      return true;
    }
  }
}
