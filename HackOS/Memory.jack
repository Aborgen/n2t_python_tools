class Memory {
  static int HEAPSIZE;
  static Array ram;
  static Array heap;

  function void init() {
    // Sets base address of ram to be address 0, allowing full access to the system's RAM.
    let ram = 0;
    let HEAPSIZE = 14334;
    do Memory.initHeap();
    return;
  }

  function void initHeap() {
    let heap = 2048;
    let heap[0] = null;
    let heap[1] = HEAPSIZE;
    return;
  }

  function int peek(int address) {
    return ram[address];
  }

  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  function int alloc(int size) {
    var int baseAddress;
    let size = size + 2;
    let baseAddress = Memory.findBestBlock(size);
    return baseAddress;
  }

  // http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/New-Heap-Management-algorithm-Coursera-version-td4032026.html
  // This way of deallocating makes it simple to defrag the heap.
  function void deAlloc(Array obj) {
    var Array givenBlock, currentBlock, nextBlock;
    // obj is only comprised of the data part of the block, not the two headers that come before it.
    let givenBlock = obj - 2;
    let currentBlock = heap;
    let nextBlock = currentBlock[0];
    // Place givenBlock in the heap linked list, which is sorted by address.
    while ((~(nextBlock = null)) & (nextBlock < givenBlock)) {
      let currentBlock = nextBlock;
      let nextBlock = currentBlock[0];
    }

    let currentBlock[0] = givenBlock;
    let givenBlock[0] = nextBlock;
    // After, perform defragmentation, if possible.
    // Combine givenBlock and nextBlock if they are next to each other in memory
    if ((givenBlock + givenBlock[1] + 2) = nextBlock) {
      let givenBlock[1] = givenBlock[1] + nextBlock[1] + 2;
      let givenBlock[0] = nextBlock[0];
    }
    // Combine currentBlock and givenBlock if they are next to each other in memory
    else {if ((currentBlock + currentBlock[1] + 2) = givenBlock) {
      let currentBlock[1] = currentBlock[1] + givenBlock[1] + 2;
      let currentBlock[0] = givenBlock[0];
    }}

    return;
  }

  function void clearRAMRange(int start, int end) {
    do Memory.setRAMRange(start, end, 0);
    return;
  }

  function void setRAMRange(int start, int end, int value) {
    while ((start < end) | (start = end)) {
      let ram[start] = value;
      let start = start + 1;
    }

    return;
  }

  function int findBestBlock(int size) {
    var Array block, bestFit;
    let block = heapFree;
    let bestFit = heapFree;
    while (~(block[0] = null)) {
      if ((block[1] > size) | (block[1] = size)) {
        if (block[1] < bestFit[1]) {
          let bestFit = block;
        }
      }

      let block = block[0];
    }

    if (bestFit[1] < size) {
      return null;
    }

    let bestFit[0] = null;
    let bestFit[1] = bestFit[1] - size;
    return bestFit[2] + bestFit[1];
  }
}
