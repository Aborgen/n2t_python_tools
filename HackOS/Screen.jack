class Screen {
  static int SCREEN_START;
  static Array bitMask;
  static boolean COLOR;
  
  function void init() {
    let SCREEN_START = 16384;
    let COLOR = true; // true = black, false = white
    let bitMask = Math.power2Array();
    return;
  }

  function void setColor(boolean color) {
    let COLOR = color;
    return;
  }

  function void drawPixel(int x, int y) {
    var int address, x16thBit, value;
    let address = (x / 16) + (y * 32) + SCREEN_START;
    let x16thBit = bitMask[Math.modPositive(x, 16)];
    do Screen.setBitsAtAddress(address, x16thBit);
    return;
  }

  function void drawLine(int x1, int y1, int x2, int y2) {
    var int diff, temp, a, b;
    if (x1 = x2) {
      do Screen.drawVerticalLine(x1, y1, y2);
      return;
    }

    if (y1 = y2) {
      do Screen.drawHorizontalLine(y1, x1, x2);
      return;
    }

    if (x1 > x2) {
      let temp = x1;
      let x1 = x2;
      let x2 = temp;
    }

    if (y1 > y2) {
      let temp = y1;
      let y1 = y2;
      let y2 = temp;
    }

    let a = x1;
    let b = y1;
    let diff = (a * y2) - (b * x2);
    while ( ((a < x2) | (a = x2) ) & ((b < y2) | (b = y2)) ) {
      do Screen.drawPixel(x1 + a, y1 + b);
      if (diff < 0) {
        let a = a + 1;
        let diff = diff + y2;
      }
      else {
        let b = b + 1;
        let diff = diff - x2;
      }
    }

    return;
  }

  function void drawVerticalLine(int x, int y1, int y2) {
    var int temp, x16thBit, address;
    if (y1 > y2) {
      let temp = y2;
      let y2 = y1;
      let y1 = temp;
    }

    let x16thBit = bitMask[Math.modPositive(x, 16)];
    let address = (x / 16) + (y1 * 32) + SCREEN_START;
    while ((y1 < y2) | (y1 = y2)) {
      do Screen.setBitsAtAddress(address, x16thBit);
      let address = address + 32;
      let y1 = y1 + 1;
    }

    return;
  }

  function void drawHorizontalLine(int y, int x1, int x2) {
    var int temp, dx, xMod16, xDiv16, wordCount, addressBase;
    if (x1 > x2) {
      let temp = x2;
      let x2 = x1;
      let x1 = temp;
    }

    let addressBase = (y * 32) + SCREEN_START;
    while ((x1 < x2) | (x1 = x2)) {
      let xDiv16 = x1 / 16;
      // If we are targeting the first bit of a word, then set the whole word to 16 (1|0)s as long as the entire word is a part of the line.
      // NOTE: true = -1, false = 0 in the Jack language.
      if ((xMod16 = 0) & ((x2 - x1) > 15)) {
        do Memory.poke(addressBase + xDiv16, COLOR);
        let x1 = x1 + 16;
      }
      else {
        do Screen.setBitsAtAddress(addressBase + xDiv16, bitMask[xMod16]);
        if (xMod16 = 15) {
          let xMod16 = 0;
        }
        else {
          let xMod16 = xMod16 + 1;
        }

        let x1 = x1 + 1;
      }
    }

    return;
  }

  function void drawRectangle(int x1, int y1, int x2, int y2) {
    var int temp, dx, dy, n;
    if (x1 > x2) {
      let temp = x1;
      let x1 = x2;
      let x2 = temp;
    }

    if (y1 > y2) {
      let temp = y1;
      let y1 = y2;
      let y2 = temp;
    }

    let dx = x2 - x1;
    let dy = y2 - y1;
    if (dx > dy) {
      do Screen.drawHorizontalRectangle(y1, x1, x2, dy);
    }
    else {
      do Screen.drawVerticalRectangle(x1, y1, y2, dx);
    }

    return;
  }

  function void drawVerticalRectangle(int x, int y1, int y2, int width) {
    while ((x < width) | (x = width)) {
      do Screen.drawVerticalLine(x, y1, y2);
      let x = x + 1;
    }

    return;
  }

  function void drawHorizontalRectangle(int y, int x1, int x2, int length) {
    while ((y < length) | (y = length)) {
      do Screen.drawHorizontalLine(y, x1, x2);
      let y = y + 1;
    }

    return;
  }

  function void drawCircle(int x, int y, int r) {
    var int dy, r2, dy2, length;
    let r = Math.min(r, 181);
    let r2 = r * r;
    let dy = -r;
    let dy2 = dy * dy;
    while ((dy < r) | (dy = r)) {
      let length = Math.sqrt(r2 - dy2);
      do Screen.drawLine(x - length, y + dy, x + length, y + dy);
      do Screen.drawLine(x - length, y + r, x + length, y + r);
      let dy = dy + 1;
      let dy2 = dy2 + dy + (dy + 1);
      let r = r - 1;
    }

    return;
  }

  function void setBitsAtAddress(int address, int bit) {
    var int value;
    let value = Memory.peek(address);
    // When COLOR = false, then the color painted must be white, which means no bit set at that particular pixel.
    if (~COLOR) {
      let value = value & ~bit;
    }
    else {
      let value = value | bit;
    }

    do Memory.poke(address, value);
    return;
  }
}
