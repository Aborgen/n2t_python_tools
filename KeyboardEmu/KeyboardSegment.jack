class KeyboardSegment
{
  static int initialKeyPadding;
  static int initialKeyBorder;
  static int initialKeyN;
  static int FIRST_KEYCODE;
  static int LAST_KEYCODE;
  static int NON_FUNCTIONAL_KEYS;

  field int keyPadding;
  field int keyBorder;
  field int keyN;
  field Point topLeft;
  field Point keySlot;
  field Array keys;
  field int rowCount, columnCount, rowIndex, columnIndex;
  field Rectangle body;
  field boolean color;
  field boolean reachedMaximumWidth;
  
  constructor KeyboardSegment new(KeyboardEmu parent, int rows, int columns)
  {
    let initialKeyPadding = 2;
    let initialKeyBorder = 1;
    let initialKeyN = 3;
    let FIRST_KEYCODE = 32;
    let LAST_KEYCODE = 152;
    let NON_FUNCTIONAL_KEYS = 10;

    let keyPadding = initialKeyPadding * parent.Scale();
    let keyBorder = initialKeyBorder * parent.Scale();
    let keyN = initialKeyN * parent.Scale();
    // Keys are stored with their index being their ASCII keycode - 32 (space bar, the first keycode we're
    // concerned with). This is to ensure that lookup time is constant. The array must be able to hold more
    // than that, however, as we have a number of keys that do not have a keycode that we need to keep track of.
    let keys = Array.new(LAST_KEYCODE-FIRST_KEYCODE+NON_FUNCTIONAL_KEYS+1);
    let rowCount = rows;
    let columnCount = columns;
    let rowIndex = 0;
    let columnIndex = 0;

    let topLeft = parent.TopLeftCorner();
    let keySlot = _initKeySlot();
    let body = _initBody(columns);
    let color = parent.Color();
    return this;
  }

  method int Width()
  {
    return body.InnerWidth();
  }

  method int Height()
  {
    return body.InnerHeight();
  }

  method int KeySize()
  {
    return keyBorder + keyN;
  }

  method Rectangle Body()
  {
    return body;
  }

  method void scaleUp(int scale) {
    var Rectangle key;
    var int i, n;
    do body.scaleUp(scale);
    let i = 0;
    let n = LAST_KEYCODE - FIRST_KEYCODE + NON_FUNCTIONAL_KEYS + 1;
    while (i < n) {
      let key = keys[i];
      if (~(key = 0)) {
        do key.scaleUp(scale);
      }

      let i = i + 1;
    }

    return;
  }

  method void scaleDown(int scale) {
    var Rectangle key;
    var int i, n;
    do body.scaleDown(scale);
    let i = 0;
    let n = LAST_KEYCODE - FIRST_KEYCODE + NON_FUNCTIONAL_KEYS + 1;
    while (i < n) {
      let key = keys[i];
      if (~(key = 0)) {
        do key.scaleDown(scale);
      }

      let i = i + 1;
    }

    return;
  }

  method void toggleKey(int keyCode)
  {
    var int idx;
    var Rectangle key, shift;
    var boolean shiftEnabled;
    let shiftEnabled = true;
    
    // This tower of if statements is used to determine whether the shift key should be toggled
    if (keyCode = 33) {
      let idx = 49;
    }
    else {if (keyCode = 34) {
      let idx = 39;
    }
    else {if ((keyCode > 34) & (keyCode < 38))  {
      let idx = keyCode + 16;
    }
    else {if (keyCode = 38) {
      let idx = 55;
    }
    else {if (keyCode = 40) {
      let idx = 57;
    }
    else {if (keyCode = 41) {
      let idx = 48;
    }
    else {if (keyCode = 42) {
      let idx = 56;
    }
    else {if (keyCode = 43) {
      let idx = 61;
    }
    else {if (keyCode = 58) {
      let idx = 59;
    }
    else {if ((keyCode = 60) | (keyCode = 62) | (keyCode = 63)) {
      let idx = keyCode - 16;
    }
    else {if (keyCode = 64) {
      let idx = 50;
    }
    else {if (keyCode = 94) {
      let idx = 54;
    }
    else {if (keyCode = 95) {
      let idx = 45;
    }
    else {if ((keyCode > 122) & (keyCode < 126)) {
      let idx = keyCode - 32;
    }
    else {if (keyCode = 126) {
      let idx = 96;
    }
    else {
      let idx = keyCode;
      let shiftEnabled = false;
    }}}}}}}}}}}}}}} // Need an end curly bracket for each else block!

    if (shiftEnabled) {
      let shift = keys[124];
      do shift.toggleFillColor();
    }

    let key = keys[idx-FIRST_KEYCODE];
    do key.toggleFillColor();
    return;
  }

  method void placeTripleHorizontal(int keyCode)
  {
    var Point nextSlot;
    var Rectangle key;
    if ((columnIndex = columnCount) & (rowIndex = (rowCount-1))) {
      return;
    }

    let nextSlot = Point.new(keySlot.X(), keySlot.Y());
    do nextSlot.addPoint(Point.new(keyN, 0));
    let key = DrawRectangle.horizontal3to1(nextSlot, keyN, keyBorder, color);
    do key.grow((keyPadding/2)+keyBorder, 0);
    do _place(key, keyCode);
    do placeEmpty();
    do placeEmpty();
    return;
  }

  method void placeDoubleHorizontal(int keyCode)
  {
    var Point nextSlot;
    var Rectangle key;
    if ((columnIndex = columnCount) & (rowIndex = (rowCount-1))) {
      return;
    }

    let nextSlot = Point.new(keySlot.X(), keySlot.Y());
    do nextSlot.addPoint(Point.new(keyN/2, 0));
    let key = DrawRectangle.horizontal2to1(nextSlot, keyN, keyBorder, color);
    do key.grow(keyPadding/2, 0);
    do _place(key, keyCode);
    do placeEmpty();
    return;
  }

  method void placeDoubleVertical(int keyCode)
  {
    var Point nextSlot;
    var Rectangle key;
    if ((columnIndex = columnCount) & (rowIndex = (rowCount-1))) {
      return;
    }

    let nextSlot = Point.new(keySlot.X(), keySlot.Y());
    let key = DrawRectangle.square(nextSlot, keyN, keyBorder, color);
    do key.grow(0, keyPadding/2);
    do _place(key, keyCode);
    return;
  }

  method void placeSpacebar(int keyCode)
  {
    var Point nextSlot;
    var Rectangle key;
    var int length;
    if ((columnIndex = columnCount) & (rowIndex = (rowCount-1))) {
      return;
    }

    let nextSlot = Point.new(keySlot.X(), keySlot.Y());
    // These numbers may look bizzare: that's because they are. A lot of trial and error was involved.
    do nextSlot.addPoint(Point.new((keyN*4)+(keyPadding/2), 0));
    let length = 10;
    let key = DrawRectangle.scaledRectangle(nextSlot, keyN, length, keyBorder, color);
    do key.grow(keyPadding, keyPadding/2);
    do _place(key, keyCode);
    while (length > 3) {
      do placeEmpty();
      let length = length - 1;
    }

    return;
  }

  method void placeSingle(int keyCode)
  {
    var Point nextSlot;
    var Rectangle key;
    if ((columnIndex = columnCount) & (rowIndex = (rowCount-1))) {
      return;
    }
    let nextSlot = Point.new(keySlot.X(), keySlot.Y());
    let key = DrawRectangle.square(nextSlot, keyN, keyBorder, color);
    do _place(key, keyCode);
    return;
  }

  method void placeEmpty()
  {
    do _place(0, 0);
    return;
  }

  method void _place(Rectangle key, int keyCode)
  {
    var int idx;
    // Ignore empty keys
    if (~((key = 0) & (keyCode = 0))) {
      if (keyCode < 0) {
        // These keys are "non functional," in that Hack OS does not provide a way for us to know if they have
        // been pressed. They still need to be stored in order to scale the keyboard.
        let idx = (LAST_KEYCODE-FIRST_KEYCODE) - keyCode;
      }
      else {
        let idx = keyCode-FIRST_KEYCODE;
      }

      let keys[idx] = key;
    }

    do _advanceKeySlot();
    return;
  }

  method void _advanceKeySlot()
  {
    var int x, y;
    // Next row
    if (columnIndex = (columnCount-1)) {
      // No more rows
      if (rowIndex = (rowCount-1)) {
        return;
      }

      let x = topLeft.X() + keyPadding;
      let y = topLeft.Y() + (keyN + (2 * keyPadding * (rowIndex + 1)));
      do keySlot.dispose();
      let keySlot = Point.new(x, y);
      let rowIndex = rowIndex + 1;
      let columnIndex = 0;
    }
    else {
      do keySlot.addPoint(Point.new(KeySize(), 0));
      let columnIndex = columnIndex + 1;
    }

//    // Visualize next key placement
//    do Screen.setColor(~color);
//    do Screen.drawCircle(keySlot.X(), keySlot.Y(), 1);
    return;
  }

  method Point _initKeySlot()
  {
    return Point.addStatic(topLeft, keyPadding);
  }

  method Rectangle _initBody(int columns)
  {
    var int width, x;
    let width = (KeySize() * columns);
    let x = topLeft.X() + (width / 2);
    return Rectangle.new(Point.new(x, topLeft.Y()), width, 0, 0, true);
  }

  method void dispose()
  {
    do origin.dispose();
    do keys.dispose();
    do body.dispose();
    do Memory.deAlloc(this);
    return;
  }
}
