class KeyboardEmu
{
  static int keyRows;

  static int MIN_SIZE, MAX_SIZE;

  field Rectangle body;
  field KeyboardSegment main;
  field int scale;
  field Array keyCodeArray;

  constructor KeyboardEmu new(Rectangle _body, int _scale)
  {
    let keyRows = 6;
    let MIN_SIZE = 2;
    let MAX_SIZE = 5;

    let body = _body;
    let scale = _scale;
    do _initKeyCodeArray();
    do _initMainSegment();
    return this;
  }

  method boolean Color()
  {
    return body.Color();
  }

  method int Scale()
  {
    return scale;
  }

//  method Point TopLeftCorner()
//  {
//    var Point origin, offset;
//    var int width, height;
//    let width = body.InnerWidth() / 2;
//    let height = body.InnerHeight() / 2;
//    let origin = body.Origin();
////    do body.drawOrigin();
//    let offset = Point.new(width, height);
//    return Point.subPointStatic(origin, offset);
////    var Point borigin, offset;
////    let borigin = body.Origin();
////    let offset = Point.new(body.InnerWidth()/2, body.InnerHeight()/2);
////    return Point.subPointStatic(Point.new(borigin.X(), borigin.Y()), offset);
//  }

//  method int InnerWidth()
//  {
//    return body.InnerWidth();
//  }
//
//  method int OuterWidth()
//  {
//    return body.OuterWidth();
//  }
//
//  method int InnerHeight()
//  {
//    return body.InnerHeight();
//  }
//
//  method int OuterHeight()
//  {
//    return body.OuterHeight();
//  }
//
//  method Point Origin()
//  {
//    return body.Origin();
//  }
//
//  method Rectangle Body()
//  {
//    return body;
//  }

  method void monitorKeyboard()
  {
    var char key, previousKey;
    while (true) {
      let key = 0;
      let previousKey = 0;
      while (key = 0) {
        let key = Keyboard.keyPressed();
      }

      if (key = 43) {
        do _scale(true);
      }
      else {if (key = 45) {
        do _scale(false);
      }}

      let previousKey = key;
      do toggleKey(key);
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }

      do toggleKey(previousKey);
    }

    return;
  }

  method void toggleKey(char keyCode)
  {
    do main.toggleKey(keyCode);
    return;
  }

  method void _initMainSegment()
  {
    var Point originCopy;
    var boolean keyPlaced;
    var int keyNumber, n;
    var int i, offset;
    var int keyCode;

    let originCopy = Point.copy(body.Origin());
    let keyNumber = 20;
//    let main = KeyboardSegment.new(this, keyRows, keyNumber);
    let main = KeyboardSegment.new(originCopy, body.InnerWidth(), body.InnerHeight(), scale, body.Color(), keyRows, keyNumber);
    // Number of keys
    let n = keyRows * keyNumber;
    let i = 0;
    let offset = 0;
    while (i+offset < n) {
//    while (i < 81) {
      let keyPlaced = false;
      let keyCode = keyCodeArray[i];
      // Shift, Enter, Backspace
      if ((i = 26) | (i = 59) | (i = 60) | (i = 71)) {
        do main.placeTripleHorizontal(keyCode);
        let keyPlaced = true;
        let offset = offset + 2;
      }
      // Tab, |, Caps Lock, Ctrl L, Ctrl R
      if (~keyPlaced) {
        if ((i = 30) | (i = 43) | (i = 47) | (i = 73) | (i = 79)) {
          do main.placeDoubleHorizontal(keyCode);
          let keyPlaced = true;
          let offset = offset + 1;
        }
      }
      // Super L, Alt L, Alt R, Super R
      if (~keyPlaced) {
        if ((i = 74) | (i = 75) | (i = 77) | (i = 78)) {
          do main.placeDoubleVertical(keyCode);
          let keyPlaced = true;
        }
      }
      // Spacebar
      if (~keyPlaced) {
        if (i = 76) {
          do main.placeSpacebar(keyCode);
          let keyPlaced = true;
          let offset = offset + 7;
        }
      }

      if (~keyPlaced) {
        do main.placeSingle(keyCode);
      }

      // Place typical spaces between groups on the function row, as well as directly after rows 1, 2, and 5
      if ((i = 0) | (i = 4) | (i = 8) | (i = 26) | (i = 43) | (i = 72) | (i = 79)) {
        do main.placeEmpty();
        let offset = offset + 1;
      }
      // Move past these rows, as they contain no more keys
      if ((i = 12) | (i = 59) ) {
        do main.placeEmpty();
        do main.placeEmpty();
        do main.placeEmpty();
        do main.placeEmpty();
        let offset = offset + 4;
      }
      if (i = 71) {
        do main.placeEmpty();
        do main.placeEmpty();
        let offset = offset + 2;
      }

      let i = i + 1;
    }

//    do keyCodeArray.dispose();
    return;
  }

  method void _scale(boolean positive)
  {
    if (positive) {
      if (scale = MAX_SIZE) {
        return;
      }

      do DrawRectangle.erase(body);
      do body.scaleUp(scale);
      let scale = scale + 1;
    }
    else {
      if (scale = MIN_SIZE) {
        return;
      }

      do DrawRectangle.erase(body);
      do body.scaleDown(scale);
      let scale = scale - 1;
    }

    do main.dispose();
    do _initMainSegment();
    return;
  }

  method void _initKeyCodeArray()
  {
    // Oddity: When Array is intialized to 13 and keyCodeArray[0] = 140, I somehow eat into Screen.
    let keyCodeArray = Array.new(83);
    // Row 0
    let keyCodeArray[0] = 140;
    let keyCodeArray[1] = 141;
    let keyCodeArray[2] = 142;
    let keyCodeArray[3] = 143;
    let keyCodeArray[4] = 144;
    let keyCodeArray[5] = 145;
    let keyCodeArray[6] = 146;
    let keyCodeArray[7] = 147;
    let keyCodeArray[8] = 148;
    let keyCodeArray[9] = 149;
    let keyCodeArray[10] = 150;
    let keyCodeArray[11] = 151;
    let keyCodeArray[12] = 152;
    // Row 1
    let keyCodeArray[13] = 96;
    let keyCodeArray[14] = 49;
    let keyCodeArray[15] = 50;
    let keyCodeArray[16] = 51;
    let keyCodeArray[17] = 52;
    let keyCodeArray[18] = 53;
    let keyCodeArray[19] = 54;
    let keyCodeArray[20] = 55;
    let keyCodeArray[21] = 56;
    let keyCodeArray[22] = 57;
    let keyCodeArray[23] = 48;
    let keyCodeArray[24] = 45;
    let keyCodeArray[25] = 61;
    let keyCodeArray[26] = 129;
    let keyCodeArray[27] = 138;
    let keyCodeArray[28] = 134;
    let keyCodeArray[29] = 136;
    // Row 2
    let keyCodeArray[30] = -1;
    let keyCodeArray[31] = 81; 
    let keyCodeArray[32] = 87;
    let keyCodeArray[33] = 69;
    let keyCodeArray[34] = 82;
    let keyCodeArray[35] = 84;
    let keyCodeArray[36] = 89;
    let keyCodeArray[37] = 85;
    let keyCodeArray[38] = 73;
    let keyCodeArray[39] = 79;
    let keyCodeArray[40] = 80;
    let keyCodeArray[41] = 91;
    let keyCodeArray[42] = 93;
    let keyCodeArray[43] = 92;
    let keyCodeArray[44] = 139;
    let keyCodeArray[45] = 135;
    let keyCodeArray[46] = 137;
    // Row 3
    let keyCodeArray[47] = -2;
    let keyCodeArray[48] = 65;
    let keyCodeArray[49] = 83;
    let keyCodeArray[50] = 68;
    let keyCodeArray[51] = 70;
    let keyCodeArray[52] = 71;
    let keyCodeArray[53] = 72;
    let keyCodeArray[54] = 74;
    let keyCodeArray[55] = 75;
    let keyCodeArray[56] = 76;
    let keyCodeArray[57] = 59;
    let keyCodeArray[58] = 39;
    let keyCodeArray[59] = 128;
    // Row 4
    let keyCodeArray[60] = -3;
    let keyCodeArray[61] = 90;
    let keyCodeArray[62] = 88;
    let keyCodeArray[63] = 67;
    let keyCodeArray[64] = 86;
    let keyCodeArray[65] = 66;
    let keyCodeArray[66] = 78;
    let keyCodeArray[67] = 77;
    let keyCodeArray[68] = 44;
    let keyCodeArray[69] = 46;
    let keyCodeArray[70] = 47;
    let keyCodeArray[71] = -4;
    let keyCodeArray[72] = 131;
    // Row 5
    let keyCodeArray[73] = -5;
    let keyCodeArray[74] = -6;
    let keyCodeArray[75] = -7;
    let keyCodeArray[76] = 32;
    let keyCodeArray[77] = -8;
    let keyCodeArray[78] = -9;
    let keyCodeArray[79] = -10;
    let keyCodeArray[80] = 130;
    let keyCodeArray[81] = 133;
    let keyCodeArray[82] = 132;
    return;
  }

  method void dispose()
  {
    do body.dispose();
    do main.dispose();
    do keys.dispose();
    do keyCodeArray.dispose();
    do Memory.deAlloc(this);
    return;
  }
}
